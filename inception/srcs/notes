====================== DOCKER ============================

docker image:
- a blueprint for ur docker containers
- has the OS env, code, tools etc
- created using docker build from Dockerfile (see notes 2 for dockerfile general syntaxes)

docker container:
- a running instance of a docker image
- like a mini computer 
- vs vm
  1) more lightweight, less resources used
  2) smallar
  3) analogy: using a room and using a whole ass house
- how container runs
  1) uses the host kernel (core part of the OS that controls the computer aspects like memory)
  2) everything else in the container is from the image or gotten from the Dockerfile image building (files, dependencies....)
- at the start of running, executes the stuff in CMD
- the first process executed when the docker container start running is PID 1, like the CMD or ENTRYPOINT


====================== NGINX ============================

TLS: 

- TLS encrypts ur http requests and responses so outsiders cant monitor or spy
- Basics on how it happens:
  1) TLS handshake, agree on the encryption method used
  2) pass the encrypted response and requests around
- gives the "s" in https

certs and keys:
- TLS requires something called an SSL cert from the webserver to check if its safe
- the ssl key is like a private key, used for private stuffs like decrypting
- generated from the openssl command
  -> openssl req = request for key and cert generation
  -> x509 = generates a SELF SIGNED cert, specifying that its NOT a request to sign a cert
  -> nodes = no password cert, so when use dont need type password
  -> out = output file for the cert
  -> keyout = output file for the key
  -> subj "" = used to specify the fields for the cert during cert generation (can try running without this to see the prompt lol)

php:
- scripts / codes that produce html webpages


====================== MARIADB ============================
- stores wordpress data in tables
- including posts, user info, webpages, etc

mysql:
- smth like a terminal that lets u run SQL commands (such as SHOW TABLES; , etc)
- activated using "docker exec -it my_mariadb mysql -u root -p"

mysqld:
- the server daemon that runs everything in the back
- mysql is like the qr code that accepts ur food order, mysqld is like the waiter

running steps:
1) mysql_install = sets up the database system, which is like a "space" / big area that stores all databases
2) bootstrap = starts up mysqld TEMPORARILY to do all the configs, after done close it
3) run mysqld fr
reason: because mysqld is a hanging process that waits for connection, so if do exec mysqld first u cant do the config cuz no more terminal dy, have to open bash in another terminal and do again v mafan and idt a dockerfile and script itself can do smth liddat automatically

configs involved in bootstrap:
  1) creating a database, which contains tables, and other data
  2) creates a user, which can modify the database created
  3) assign perms to this user, this user will be the same as the database user, as this user will have the power to make posts / comments, which will be stored inside the database, so it must have perms
  4) modifies the root user password, cuz by default root has no pw / random pw
  5) flushing on both ends to ensure safety and to apply changes
- bootstrap syntax:
  1) --bootstrap = runs msql (terminal) in bootstrap mode
  2) < = redirection to stdin, like CREATE_DATABASE.....;
  3) /tmp... = file that contains the config
- installing mariadb automatically creates a "user" called mysql to modify / do stuff cuz doing stuff in root can be dangerous

====================== wordpress =============================
dockerfile installations:

  wget:
  - something that can help u download stuff if u give the link
  php-fpm:
  - something to run php files
  php-mysql:
  - something that allows php to talk to / connect with Mariadb database to read or write stuff
  - eg. when making posts all those
  tar -xzf:
  - unzips the file
  - x = extract, z = uncompressing, f = filename
  wpcli-phar:
  - to configure / modify our wordpress from the terminal
  - phar is like a php file containing everything we need

wpscript:
1) wp config create:
  - checks if the wp-config file exist
  - if it doesnt, create one and set variables
  - all this to skip the first welcome page
2) wp core install:
  - used to skip the second welcome page
3) wp create user:
  - create new user cuz subject asks to lol
4) mkdir:
  - somehow installin php doesnt create its own dir wts need to create urself if not cannot run one
5) phpfpm:
  - uses phpfpm to run the script
  - -F = run in the foreground to keep the container running

====================== Dockercompose file =============================
mariadb:
  network:
  - allows containers to talk to each other
  - isolates ur containers so outside cannot connect (unless 'port' header field is used is used, like in nginx)
  volume:
  - specifies the volume called mariadb which is mounted to /var/lib.... INSIDE the container
  - meaning all data writes to /var/lib... will be stored inside the volume
  - mounting means like binding, so writing to the /var/lib.... will directly write to the volume inside the host machine
  build:
  - specifies docker compose to build the docker image based on our own service images, not take from dockerhub
  - opposite of 'images:' header field which takes from dockerhub online

nginx:
- port:port = host port : container port
- depends on = start the container specified (wordpress) before starting this container

volumes:
- driver: the mounter, mounts our volume to a filesystem, in this case we using our own local mounter
- type: type of mount the driver shud use, in this case its NONE NOT BINDDDDDDDDD
- o: options to tell our local driver
- device: the path
ok heres an explanation, apparently we need a volume WITH a name, but also we need the bind behaviour where wtv we change inside the docker will change in our local volume, and we need a file path we can specify. So we do type none + o bind. So we specify like we're creating a named volume, but type none cuz we're not actually doing bind mount, more like we're doing normal mount with bind behaviour. If we use type : bind instead, we cant name our volumes lol.

network:
- driver: to specify wat type of nework we want

====================== common commands =============================
docker: 
docker exec -it <container> <command>
docker logs <container>
docker compose ps

mariadb:
docker exec -it my_mariadb mysql -u root -p <-- for the mysql terminal
SHOW DATABASES; USE <DATABASE NAME>; SHOW TABES; SELECT * FROM <TABLE NAME>


====================== eval sheetssss =============================
- docker runs images, to give containers, and docker compose manages multiple containers
- with compose, run multiple images giving multiple containers, if not then need to run images individually
- lightweight, ....
- very organised yes every services split clearly

- run cheelim.42.fr:443 or without the 443 shud work, run cheelim.42.fr:123 shudnt work
- show nginx config
- run login.42.fr and show it doesnt work

- show dockerfile
- used debian:bullseye cuz its the curr penult stable, if follow old eval sheet change to debian:buster and change php7.4 to 7.3
- run the terminal cmd docker images, see that the name "REPOSITORY" is the name

- run cmd docker network ls see inception network

- cd into srcs and do docker compose ps
- run http://cheelim.42.fr cannot work
- run fr and see that its not the installation page (can show wat it looks like from the guide)
- show the nginx config for 1.2 and 1.3
- run curl https://cheelim.42.fr to show self sign cert warning, add -k to ignore the warning and run fr

- docker volume ls show wordpress vol
- docker volume inspect wordpress shows path /home.....
- add comment and edit page

- same thing docker volume ls + inspecting
- run docker exec -it mariadb mysql -u root -p then type 0123
- run docker exec -it mariadb mysql -u cheelim -p then type 123
- do SHOW DATABASES; USE <DATABASE NAME>; SHOW TABES; SELECT * FROM <TABLE NAME>

- verify if the changes to sample page is still there
- DONE!!!!!!!

====================== bonus notes =============================
- wts when writing shell scripts the if [ command ] need to write wif space before and after '[' and ']' cuz of how bash tokenizer works 
-